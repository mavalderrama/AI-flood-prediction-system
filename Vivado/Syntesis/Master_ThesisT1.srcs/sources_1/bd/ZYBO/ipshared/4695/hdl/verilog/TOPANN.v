// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TOPANN,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=91,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=14,HLS_SYN_FF=2622,HLS_SYN_LUT=3698}" *)

module TOPANN (
        ap_clk,
        ap_rst_n,
        m_axi_INPUTS_AWVALID,
        m_axi_INPUTS_AWREADY,
        m_axi_INPUTS_AWADDR,
        m_axi_INPUTS_AWID,
        m_axi_INPUTS_AWLEN,
        m_axi_INPUTS_AWSIZE,
        m_axi_INPUTS_AWBURST,
        m_axi_INPUTS_AWLOCK,
        m_axi_INPUTS_AWCACHE,
        m_axi_INPUTS_AWPROT,
        m_axi_INPUTS_AWQOS,
        m_axi_INPUTS_AWREGION,
        m_axi_INPUTS_AWUSER,
        m_axi_INPUTS_WVALID,
        m_axi_INPUTS_WREADY,
        m_axi_INPUTS_WDATA,
        m_axi_INPUTS_WSTRB,
        m_axi_INPUTS_WLAST,
        m_axi_INPUTS_WID,
        m_axi_INPUTS_WUSER,
        m_axi_INPUTS_ARVALID,
        m_axi_INPUTS_ARREADY,
        m_axi_INPUTS_ARADDR,
        m_axi_INPUTS_ARID,
        m_axi_INPUTS_ARLEN,
        m_axi_INPUTS_ARSIZE,
        m_axi_INPUTS_ARBURST,
        m_axi_INPUTS_ARLOCK,
        m_axi_INPUTS_ARCACHE,
        m_axi_INPUTS_ARPROT,
        m_axi_INPUTS_ARQOS,
        m_axi_INPUTS_ARREGION,
        m_axi_INPUTS_ARUSER,
        m_axi_INPUTS_RVALID,
        m_axi_INPUTS_RREADY,
        m_axi_INPUTS_RDATA,
        m_axi_INPUTS_RLAST,
        m_axi_INPUTS_RID,
        m_axi_INPUTS_RUSER,
        m_axi_INPUTS_RRESP,
        m_axi_INPUTS_BVALID,
        m_axi_INPUTS_BREADY,
        m_axi_INPUTS_BRESP,
        m_axi_INPUTS_BID,
        m_axi_INPUTS_BUSER,
        m_axi_OUTPUTS_AWVALID,
        m_axi_OUTPUTS_AWREADY,
        m_axi_OUTPUTS_AWADDR,
        m_axi_OUTPUTS_AWID,
        m_axi_OUTPUTS_AWLEN,
        m_axi_OUTPUTS_AWSIZE,
        m_axi_OUTPUTS_AWBURST,
        m_axi_OUTPUTS_AWLOCK,
        m_axi_OUTPUTS_AWCACHE,
        m_axi_OUTPUTS_AWPROT,
        m_axi_OUTPUTS_AWQOS,
        m_axi_OUTPUTS_AWREGION,
        m_axi_OUTPUTS_AWUSER,
        m_axi_OUTPUTS_WVALID,
        m_axi_OUTPUTS_WREADY,
        m_axi_OUTPUTS_WDATA,
        m_axi_OUTPUTS_WSTRB,
        m_axi_OUTPUTS_WLAST,
        m_axi_OUTPUTS_WID,
        m_axi_OUTPUTS_WUSER,
        m_axi_OUTPUTS_ARVALID,
        m_axi_OUTPUTS_ARREADY,
        m_axi_OUTPUTS_ARADDR,
        m_axi_OUTPUTS_ARID,
        m_axi_OUTPUTS_ARLEN,
        m_axi_OUTPUTS_ARSIZE,
        m_axi_OUTPUTS_ARBURST,
        m_axi_OUTPUTS_ARLOCK,
        m_axi_OUTPUTS_ARCACHE,
        m_axi_OUTPUTS_ARPROT,
        m_axi_OUTPUTS_ARQOS,
        m_axi_OUTPUTS_ARREGION,
        m_axi_OUTPUTS_ARUSER,
        m_axi_OUTPUTS_RVALID,
        m_axi_OUTPUTS_RREADY,
        m_axi_OUTPUTS_RDATA,
        m_axi_OUTPUTS_RLAST,
        m_axi_OUTPUTS_RID,
        m_axi_OUTPUTS_RUSER,
        m_axi_OUTPUTS_RRESP,
        m_axi_OUTPUTS_BVALID,
        m_axi_OUTPUTS_BREADY,
        m_axi_OUTPUTS_BRESP,
        m_axi_OUTPUTS_BID,
        m_axi_OUTPUTS_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_pp0_stage0 = 33'd256;
parameter    ap_ST_fsm_state12 = 33'd512;
parameter    ap_ST_fsm_state13 = 33'd1024;
parameter    ap_ST_fsm_state14 = 33'd2048;
parameter    ap_ST_fsm_state15 = 33'd4096;
parameter    ap_ST_fsm_state16 = 33'd8192;
parameter    ap_ST_fsm_state17 = 33'd16384;
parameter    ap_ST_fsm_state18 = 33'd32768;
parameter    ap_ST_fsm_state19 = 33'd65536;
parameter    ap_ST_fsm_state20 = 33'd131072;
parameter    ap_ST_fsm_state21 = 33'd262144;
parameter    ap_ST_fsm_state22 = 33'd524288;
parameter    ap_ST_fsm_state23 = 33'd1048576;
parameter    ap_ST_fsm_state24 = 33'd2097152;
parameter    ap_ST_fsm_state25 = 33'd4194304;
parameter    ap_ST_fsm_state26 = 33'd8388608;
parameter    ap_ST_fsm_state27 = 33'd16777216;
parameter    ap_ST_fsm_state28 = 33'd33554432;
parameter    ap_ST_fsm_state29 = 33'd67108864;
parameter    ap_ST_fsm_state30 = 33'd134217728;
parameter    ap_ST_fsm_state31 = 33'd268435456;
parameter    ap_ST_fsm_state32 = 33'd536870912;
parameter    ap_ST_fsm_state33 = 33'd1073741824;
parameter    ap_ST_fsm_state34 = 33'd2147483648;
parameter    ap_ST_fsm_state35 = 33'd4294967296;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUTS_ID_WIDTH = 1;
parameter    C_M_AXI_INPUTS_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUTS_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUTS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_USER_VALUE = 0;
parameter    C_M_AXI_INPUTS_PROT_VALUE = 0;
parameter    C_M_AXI_INPUTS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUTS_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUTS_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUTS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUTS_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUTS_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUTS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUTS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUTS_AWVALID;
input   m_axi_INPUTS_AWREADY;
output  [C_M_AXI_INPUTS_ADDR_WIDTH - 1:0] m_axi_INPUTS_AWADDR;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_INPUTS_AWID;
output  [7:0] m_axi_INPUTS_AWLEN;
output  [2:0] m_axi_INPUTS_AWSIZE;
output  [1:0] m_axi_INPUTS_AWBURST;
output  [1:0] m_axi_INPUTS_AWLOCK;
output  [3:0] m_axi_INPUTS_AWCACHE;
output  [2:0] m_axi_INPUTS_AWPROT;
output  [3:0] m_axi_INPUTS_AWQOS;
output  [3:0] m_axi_INPUTS_AWREGION;
output  [C_M_AXI_INPUTS_AWUSER_WIDTH - 1:0] m_axi_INPUTS_AWUSER;
output   m_axi_INPUTS_WVALID;
input   m_axi_INPUTS_WREADY;
output  [C_M_AXI_INPUTS_DATA_WIDTH - 1:0] m_axi_INPUTS_WDATA;
output  [C_M_AXI_INPUTS_WSTRB_WIDTH - 1:0] m_axi_INPUTS_WSTRB;
output   m_axi_INPUTS_WLAST;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_INPUTS_WID;
output  [C_M_AXI_INPUTS_WUSER_WIDTH - 1:0] m_axi_INPUTS_WUSER;
output   m_axi_INPUTS_ARVALID;
input   m_axi_INPUTS_ARREADY;
output  [C_M_AXI_INPUTS_ADDR_WIDTH - 1:0] m_axi_INPUTS_ARADDR;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_INPUTS_ARID;
output  [7:0] m_axi_INPUTS_ARLEN;
output  [2:0] m_axi_INPUTS_ARSIZE;
output  [1:0] m_axi_INPUTS_ARBURST;
output  [1:0] m_axi_INPUTS_ARLOCK;
output  [3:0] m_axi_INPUTS_ARCACHE;
output  [2:0] m_axi_INPUTS_ARPROT;
output  [3:0] m_axi_INPUTS_ARQOS;
output  [3:0] m_axi_INPUTS_ARREGION;
output  [C_M_AXI_INPUTS_ARUSER_WIDTH - 1:0] m_axi_INPUTS_ARUSER;
input   m_axi_INPUTS_RVALID;
output   m_axi_INPUTS_RREADY;
input  [C_M_AXI_INPUTS_DATA_WIDTH - 1:0] m_axi_INPUTS_RDATA;
input   m_axi_INPUTS_RLAST;
input  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_INPUTS_RID;
input  [C_M_AXI_INPUTS_RUSER_WIDTH - 1:0] m_axi_INPUTS_RUSER;
input  [1:0] m_axi_INPUTS_RRESP;
input   m_axi_INPUTS_BVALID;
output   m_axi_INPUTS_BREADY;
input  [1:0] m_axi_INPUTS_BRESP;
input  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_INPUTS_BID;
input  [C_M_AXI_INPUTS_BUSER_WIDTH - 1:0] m_axi_INPUTS_BUSER;
output   m_axi_OUTPUTS_AWVALID;
input   m_axi_OUTPUTS_AWREADY;
output  [C_M_AXI_OUTPUTS_ADDR_WIDTH - 1:0] m_axi_OUTPUTS_AWADDR;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_OUTPUTS_AWID;
output  [7:0] m_axi_OUTPUTS_AWLEN;
output  [2:0] m_axi_OUTPUTS_AWSIZE;
output  [1:0] m_axi_OUTPUTS_AWBURST;
output  [1:0] m_axi_OUTPUTS_AWLOCK;
output  [3:0] m_axi_OUTPUTS_AWCACHE;
output  [2:0] m_axi_OUTPUTS_AWPROT;
output  [3:0] m_axi_OUTPUTS_AWQOS;
output  [3:0] m_axi_OUTPUTS_AWREGION;
output  [C_M_AXI_OUTPUTS_AWUSER_WIDTH - 1:0] m_axi_OUTPUTS_AWUSER;
output   m_axi_OUTPUTS_WVALID;
input   m_axi_OUTPUTS_WREADY;
output  [C_M_AXI_OUTPUTS_DATA_WIDTH - 1:0] m_axi_OUTPUTS_WDATA;
output  [C_M_AXI_OUTPUTS_WSTRB_WIDTH - 1:0] m_axi_OUTPUTS_WSTRB;
output   m_axi_OUTPUTS_WLAST;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_OUTPUTS_WID;
output  [C_M_AXI_OUTPUTS_WUSER_WIDTH - 1:0] m_axi_OUTPUTS_WUSER;
output   m_axi_OUTPUTS_ARVALID;
input   m_axi_OUTPUTS_ARREADY;
output  [C_M_AXI_OUTPUTS_ADDR_WIDTH - 1:0] m_axi_OUTPUTS_ARADDR;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_OUTPUTS_ARID;
output  [7:0] m_axi_OUTPUTS_ARLEN;
output  [2:0] m_axi_OUTPUTS_ARSIZE;
output  [1:0] m_axi_OUTPUTS_ARBURST;
output  [1:0] m_axi_OUTPUTS_ARLOCK;
output  [3:0] m_axi_OUTPUTS_ARCACHE;
output  [2:0] m_axi_OUTPUTS_ARPROT;
output  [3:0] m_axi_OUTPUTS_ARQOS;
output  [3:0] m_axi_OUTPUTS_ARREGION;
output  [C_M_AXI_OUTPUTS_ARUSER_WIDTH - 1:0] m_axi_OUTPUTS_ARUSER;
input   m_axi_OUTPUTS_RVALID;
output   m_axi_OUTPUTS_RREADY;
input  [C_M_AXI_OUTPUTS_DATA_WIDTH - 1:0] m_axi_OUTPUTS_RDATA;
input   m_axi_OUTPUTS_RLAST;
input  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_OUTPUTS_RID;
input  [C_M_AXI_OUTPUTS_RUSER_WIDTH - 1:0] m_axi_OUTPUTS_RUSER;
input  [1:0] m_axi_OUTPUTS_RRESP;
input   m_axi_OUTPUTS_BVALID;
output   m_axi_OUTPUTS_BREADY;
input  [1:0] m_axi_OUTPUTS_BRESP;
input  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_OUTPUTS_BID;
input  [C_M_AXI_OUTPUTS_BUSER_WIDTH - 1:0] m_axi_OUTPUTS_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inputs_V;
wire   [3:0] layerWeigth_V_address0;
reg    layerWeigth_V_ce0;
wire   [31:0] layerWeigth_V_q0;
reg    bias_V_ce0;
wire   [31:0] bias_V_q0;
wire   [1:0] outputLayerWeigth_V_address0;
reg    outputLayerWeigth_V_ce0;
wire   [31:0] outputLayerWeigth_V_q0;
wire   [0:0] outputLayerBias_V_address0;
reg    outputLayerBias_V_ce0;
wire   [31:0] outputLayerBias_V_q0;
wire   [31:0] result_V;
reg   [11:0] coeTanSig_V_address0;
reg    coeTanSig_V_ce0;
wire   [24:0] coeTanSig_V_q0;
reg    INPUTS_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    INPUTS_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3_reg_1180;
reg    OUTPUTS_blk_n_AW;
wire    ap_CS_fsm_state29;
reg    OUTPUTS_blk_n_W;
wire    ap_CS_fsm_state30;
reg    OUTPUTS_blk_n_B;
wire    ap_CS_fsm_state35;
wire    INPUTS_AWREADY;
wire    INPUTS_WREADY;
reg    INPUTS_ARVALID;
wire    INPUTS_ARREADY;
wire   [31:0] INPUTS_ARADDR;
wire    INPUTS_RVALID;
reg    INPUTS_RREADY;
wire   [31:0] INPUTS_RDATA;
wire    INPUTS_RLAST;
wire   [0:0] INPUTS_RID;
wire   [0:0] INPUTS_RUSER;
wire   [1:0] INPUTS_RRESP;
wire    INPUTS_BVALID;
wire   [1:0] INPUTS_BRESP;
wire   [0:0] INPUTS_BID;
wire   [0:0] INPUTS_BUSER;
reg    OUTPUTS_AWVALID;
wire    OUTPUTS_AWREADY;
reg    OUTPUTS_WVALID;
wire    OUTPUTS_WREADY;
wire   [31:0] OUTPUTS_WDATA;
wire    OUTPUTS_ARREADY;
wire    OUTPUTS_RVALID;
wire   [31:0] OUTPUTS_RDATA;
wire    OUTPUTS_RLAST;
wire   [0:0] OUTPUTS_RID;
wire   [0:0] OUTPUTS_RUSER;
wire   [1:0] OUTPUTS_RRESP;
wire    OUTPUTS_BVALID;
reg    OUTPUTS_BREADY;
wire   [1:0] OUTPUTS_BRESP;
wire   [0:0] OUTPUTS_BID;
wire   [0:0] OUTPUTS_BUSER;
reg   [31:0] Ainputs_2_V_s_reg_275;
reg   [31:0] Ainputs_1_V_s_reg_287;
reg   [31:0] Ainputs_2_V_4_reg_299;
reg   [1:0] indvar_reg_311;
reg   [29:0] result_V3_reg_1153;
reg   [29:0] inputs_V1_reg_1158;
reg    ap_sig_ioackin_INPUTS_ARREADY;
reg   [31:0] OUTPUTS_addr_reg_1169;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond3_fu_456_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond3_reg_1180;
wire   [1:0] indvar_next_fu_462_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] sel_tmp_fu_468_p2;
reg   [0:0] sel_tmp_reg_1189;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp_reg_1189;
wire   [0:0] sel_tmp7_fu_474_p2;
reg   [0:0] sel_tmp7_reg_1195;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp7_reg_1195;
reg   [31:0] Ainputs_2_V_7_reg_1202;
wire   [31:0] Ainputs_2_V_1_fu_486_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] Ainputs_2_V_3_fu_499_p3;
wire   [31:0] Ainputs_2_V_5_fu_506_p3;
wire   [1:0] neuronIndex_1_fu_518_p2;
reg   [1:0] neuronIndex_1_reg_1227;
wire    ap_CS_fsm_state13;
wire   [4:0] tmp_11_fu_545_p2;
reg   [4:0] tmp_11_reg_1232;
wire   [0:0] exitcond1_fu_512_p2;
reg   [1:0] bias_V_addr_reg_1237;
wire   [1:0] i_2_fu_557_p2;
reg   [1:0] i_2_reg_1245;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond2_fu_551_p2;
wire   [31:0] tmp_21_fu_577_p5;
reg   [31:0] tmp_21_reg_1255;
reg   [31:0] layerWeigth_V_load_reg_1260;
wire    ap_CS_fsm_state15;
wire   [63:0] p_Val2_7_fu_595_p2;
reg   [63:0] p_Val2_7_reg_1265;
wire    ap_CS_fsm_state16;
reg   [31:0] p_Val2_8_reg_1271;
wire   [22:0] tmp_32_fu_611_p1;
reg   [22:0] tmp_32_reg_1276;
wire   [31:0] tmpCalc_V_fu_655_p2;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_5_fu_667_p2;
reg   [0:0] tmp_5_reg_1286;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_14_fu_673_p2;
reg   [0:0] tmp_14_reg_1293;
wire   [32:0] r_V_1_fu_683_p2;
reg   [32:0] r_V_1_reg_1300;
wire   [64:0] r_V_4_fu_692_p2;
reg   [64:0] r_V_4_reg_1305;
wire    ap_CS_fsm_state19;
reg   [16:0] ret_V_2_reg_1310;
wire   [47:0] tmp_30_fu_708_p1;
reg   [47:0] tmp_30_reg_1317;
wire    ap_CS_fsm_state20;
wire   [31:0] layerResult_2_V_5_fu_905_p3;
wire    ap_CS_fsm_state21;
wire   [31:0] layerResult_1_V_5_fu_912_p3;
wire   [31:0] layerResult_0_V_5_fu_919_p3;
wire   [1:0] i_1_fu_932_p2;
reg   [1:0] i_1_reg_1345;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond_fu_926_p2;
reg   [31:0] outputLayerWeigth_V_1_reg_1355;
wire    ap_CS_fsm_state23;
wire   [31:0] tmp_16_fu_943_p5;
reg   [31:0] tmp_16_reg_1360;
wire   [63:0] p_Val2_2_fu_961_p2;
reg   [63:0] p_Val2_2_reg_1365;
wire    ap_CS_fsm_state24;
reg   [31:0] p_Val2_3_reg_1371;
wire   [22:0] tmp_27_fu_977_p1;
reg   [22:0] tmp_27_reg_1376;
wire   [31:0] tmpCalc_V_1_fu_1021_p2;
wire    ap_CS_fsm_state25;
wire   [0:0] tmp_s_fu_1033_p2;
reg   [0:0] tmp_s_reg_1386;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_4_fu_1039_p2;
reg   [0:0] tmp_4_reg_1392;
wire   [32:0] r_V_fu_1049_p2;
reg   [32:0] r_V_reg_1397;
wire   [64:0] r_V_5_fu_1058_p2;
reg   [64:0] r_V_5_reg_1402;
wire    ap_CS_fsm_state27;
reg   [16:0] ret_V_reg_1407;
wire   [47:0] tmp_24_fu_1074_p1;
reg   [47:0] tmp_24_reg_1414;
wire    ap_CS_fsm_state28;
wire   [25:0] layerResult_V_gep_fu_1141_p3;
reg   [25:0] layerResult_V_gep_reg_1424;
reg    ap_sig_ioackin_OUTPUTS_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg   [31:0] layerResult_2_V_reg_322;
reg   [31:0] layerResult_1_V_reg_334;
reg   [31:0] layerResult_2_V_10_reg_346;
reg   [1:0] neuronIndex_reg_358;
wire    ap_CS_fsm_state12;
reg   [31:0] p_Val2_5_reg_370;
reg   [1:0] i_reg_382;
reg   [31:0] p_Val2_s_reg_393;
reg   [1:0] i2_reg_405;
wire   [63:0] tmp_fu_524_p1;
wire  signed [63:0] tmp_25_cast_fu_572_p1;
wire  signed [63:0] tmp_19_fu_743_p1;
wire   [63:0] tmp_6_fu_938_p1;
wire  signed [63:0] tmp_13_fu_1109_p1;
wire   [63:0] tmp_1_fu_437_p1;
wire   [63:0] tmp_8_fu_447_p1;
reg    ap_reg_ioackin_INPUTS_ARREADY;
reg    ap_reg_ioackin_OUTPUTS_AWREADY;
reg    ap_reg_ioackin_OUTPUTS_WREADY;
reg    ap_sig_ioackin_OUTPUTS_WREADY;
wire   [31:0] Ainputs_2_V_fu_480_p3;
wire   [31:0] Ainputs_2_V_2_fu_493_p3;
wire   [3:0] tmp_9_fu_533_p3;
wire   [4:0] p_shl_cast_fu_541_p1;
wire   [4:0] tmp_cast_fu_529_p1;
wire   [4:0] tmp_9_cast_fu_563_p1;
wire   [4:0] tmp_25_fu_567_p2;
wire  signed [31:0] p_Val2_7_fu_595_p0;
wire  signed [31:0] p_Val2_7_fu_595_p1;
wire   [0:0] tmp_33_fu_627_p3;
wire   [0:0] r_fu_622_p2;
wire   [0:0] r_i_i1_fu_634_p2;
wire   [0:0] qbit_fu_615_p3;
wire   [0:0] qb_assign_3_fu_640_p2;
wire   [31:0] tmp_12_fu_646_p1;
wire   [31:0] tmp_22_fu_650_p2;
wire   [31:0] tmpCalc_V_4_fu_661_p2;
wire  signed [32:0] tmp_17_fu_679_p1;
wire   [32:0] r_V_4_fu_692_p1;
wire   [0:0] tmp_18_fu_719_p2;
wire   [16:0] ret_V_3_fu_724_p2;
wire   [0:0] tmp_29_fu_712_p3;
wire   [16:0] p_s_fu_729_p3;
wire   [16:0] p_3_fu_736_p3;
wire   [0:0] sel_tmp5_fu_748_p2;
wire   [0:0] sel_tmp8_fu_762_p2;
wire   [31:0] sel_tmp6_fu_754_p3;
wire   [31:0] sel_tmp9_fu_776_p3;
wire   [31:0] sel_tmp1_fu_804_p3;
wire   [31:0] sel_tmp10_fu_820_p3;
wire  signed [31:0] layerResult_0_V_3_c_fu_800_p1;
wire   [31:0] layerResult_2_V_7_fu_844_p3;
wire   [31:0] layerResult_2_V_8_fu_860_p3;
wire   [31:0] layerResult_2_V_2_fu_812_p3;
wire   [31:0] layerResult_2_V_3_fu_852_p3;
wire   [31:0] layerResult_1_V_2_fu_828_p3;
wire   [31:0] layerResult_2_V_9_fu_868_p3;
wire   [31:0] layerResult_0_V_2_fu_836_p3;
wire   [31:0] layerResult_2_V_11_fu_876_p3;
wire   [31:0] layerResult_2_V_1_fu_768_p3;
wire   [31:0] layerResult_2_V_4_fu_884_p3;
wire   [31:0] layerResult_1_V_1_fu_784_p3;
wire   [31:0] layerResult_1_V_4_fu_891_p3;
wire   [31:0] layerResult_0_V_s_fu_792_p3;
wire   [31:0] layerResult_0_V_4_fu_898_p3;
wire  signed [31:0] p_Val2_2_fu_961_p0;
wire  signed [31:0] p_Val2_2_fu_961_p1;
wire   [0:0] tmp_28_fu_993_p3;
wire   [0:0] r_1_fu_988_p2;
wire   [0:0] r_i_i_fu_1000_p2;
wire   [0:0] qbit_1_fu_981_p3;
wire   [0:0] qb_assign_1_fu_1006_p2;
wire   [31:0] tmp_7_fu_1012_p1;
wire   [31:0] tmp_20_fu_1016_p2;
wire   [31:0] tmpCalc_V_5_fu_1027_p2;
wire  signed [32:0] tmp_3_fu_1045_p1;
wire   [32:0] r_V_5_fu_1058_p1;
wire   [0:0] tmp_10_fu_1085_p2;
wire   [16:0] ret_V_1_fu_1090_p2;
wire   [0:0] tmp_23_fu_1078_p3;
wire   [16:0] p_1_fu_1095_p3;
wire   [16:0] p_2_fu_1102_p3;
wire   [0:0] sel_tmp2_fu_1118_p2;
wire   [0:0] sel_tmp3_fu_1123_p2;
wire   [0:0] tmp_15_fu_1136_p2;
wire   [25:0] sel_tmp4_fu_1128_p3;
wire  signed [25:0] layerResult_0_V_1_c_fu_1114_p1;
reg   [32:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [64:0] r_V_4_fu_692_p10;
wire   [64:0] r_V_5_fu_1058_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_INPUTS_ARREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUTS_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUTPUTS_WREADY = 1'b0;
end

TOPANN_coeTanSig_V #(
    .DataWidth( 25 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
coeTanSig_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coeTanSig_V_address0),
    .ce0(coeTanSig_V_ce0),
    .q0(coeTanSig_V_q0)
);

TOPANN_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
TOPANN_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputs_V(inputs_V),
    .layerWeigth_V_address0(layerWeigth_V_address0),
    .layerWeigth_V_ce0(layerWeigth_V_ce0),
    .layerWeigth_V_q0(layerWeigth_V_q0),
    .bias_V_address0(bias_V_addr_reg_1237),
    .bias_V_ce0(bias_V_ce0),
    .bias_V_q0(bias_V_q0),
    .outputLayerWeigth_V_address0(outputLayerWeigth_V_address0),
    .outputLayerWeigth_V_ce0(outputLayerWeigth_V_ce0),
    .outputLayerWeigth_V_q0(outputLayerWeigth_V_q0),
    .outputLayerBias_V_address0(outputLayerBias_V_address0),
    .outputLayerBias_V_ce0(outputLayerBias_V_ce0),
    .outputLayerBias_V_q0(outputLayerBias_V_q0),
    .result_V(result_V)
);

TOPANN_INPUTS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUTS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUTS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUTS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUTS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUTS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUTS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUTS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUTS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUTS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUTS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUTS_CACHE_VALUE ))
TOPANN_INPUTS_m_axi_U(
    .AWVALID(m_axi_INPUTS_AWVALID),
    .AWREADY(m_axi_INPUTS_AWREADY),
    .AWADDR(m_axi_INPUTS_AWADDR),
    .AWID(m_axi_INPUTS_AWID),
    .AWLEN(m_axi_INPUTS_AWLEN),
    .AWSIZE(m_axi_INPUTS_AWSIZE),
    .AWBURST(m_axi_INPUTS_AWBURST),
    .AWLOCK(m_axi_INPUTS_AWLOCK),
    .AWCACHE(m_axi_INPUTS_AWCACHE),
    .AWPROT(m_axi_INPUTS_AWPROT),
    .AWQOS(m_axi_INPUTS_AWQOS),
    .AWREGION(m_axi_INPUTS_AWREGION),
    .AWUSER(m_axi_INPUTS_AWUSER),
    .WVALID(m_axi_INPUTS_WVALID),
    .WREADY(m_axi_INPUTS_WREADY),
    .WDATA(m_axi_INPUTS_WDATA),
    .WSTRB(m_axi_INPUTS_WSTRB),
    .WLAST(m_axi_INPUTS_WLAST),
    .WID(m_axi_INPUTS_WID),
    .WUSER(m_axi_INPUTS_WUSER),
    .ARVALID(m_axi_INPUTS_ARVALID),
    .ARREADY(m_axi_INPUTS_ARREADY),
    .ARADDR(m_axi_INPUTS_ARADDR),
    .ARID(m_axi_INPUTS_ARID),
    .ARLEN(m_axi_INPUTS_ARLEN),
    .ARSIZE(m_axi_INPUTS_ARSIZE),
    .ARBURST(m_axi_INPUTS_ARBURST),
    .ARLOCK(m_axi_INPUTS_ARLOCK),
    .ARCACHE(m_axi_INPUTS_ARCACHE),
    .ARPROT(m_axi_INPUTS_ARPROT),
    .ARQOS(m_axi_INPUTS_ARQOS),
    .ARREGION(m_axi_INPUTS_ARREGION),
    .ARUSER(m_axi_INPUTS_ARUSER),
    .RVALID(m_axi_INPUTS_RVALID),
    .RREADY(m_axi_INPUTS_RREADY),
    .RDATA(m_axi_INPUTS_RDATA),
    .RLAST(m_axi_INPUTS_RLAST),
    .RID(m_axi_INPUTS_RID),
    .RUSER(m_axi_INPUTS_RUSER),
    .RRESP(m_axi_INPUTS_RRESP),
    .BVALID(m_axi_INPUTS_BVALID),
    .BREADY(m_axi_INPUTS_BREADY),
    .BRESP(m_axi_INPUTS_BRESP),
    .BID(m_axi_INPUTS_BID),
    .BUSER(m_axi_INPUTS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUTS_ARVALID),
    .I_ARREADY(INPUTS_ARREADY),
    .I_ARADDR(INPUTS_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd3),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUTS_RVALID),
    .I_RREADY(INPUTS_RREADY),
    .I_RDATA(INPUTS_RDATA),
    .I_RID(INPUTS_RID),
    .I_RUSER(INPUTS_RUSER),
    .I_RRESP(INPUTS_RRESP),
    .I_RLAST(INPUTS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUTS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUTS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(INPUTS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUTS_BRESP),
    .I_BID(INPUTS_BID),
    .I_BUSER(INPUTS_BUSER)
);

TOPANN_OUTPUTS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUTS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUTS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUTS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUTS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUTS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUTS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUTS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUTS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUTS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUTS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUTS_CACHE_VALUE ))
TOPANN_OUTPUTS_m_axi_U(
    .AWVALID(m_axi_OUTPUTS_AWVALID),
    .AWREADY(m_axi_OUTPUTS_AWREADY),
    .AWADDR(m_axi_OUTPUTS_AWADDR),
    .AWID(m_axi_OUTPUTS_AWID),
    .AWLEN(m_axi_OUTPUTS_AWLEN),
    .AWSIZE(m_axi_OUTPUTS_AWSIZE),
    .AWBURST(m_axi_OUTPUTS_AWBURST),
    .AWLOCK(m_axi_OUTPUTS_AWLOCK),
    .AWCACHE(m_axi_OUTPUTS_AWCACHE),
    .AWPROT(m_axi_OUTPUTS_AWPROT),
    .AWQOS(m_axi_OUTPUTS_AWQOS),
    .AWREGION(m_axi_OUTPUTS_AWREGION),
    .AWUSER(m_axi_OUTPUTS_AWUSER),
    .WVALID(m_axi_OUTPUTS_WVALID),
    .WREADY(m_axi_OUTPUTS_WREADY),
    .WDATA(m_axi_OUTPUTS_WDATA),
    .WSTRB(m_axi_OUTPUTS_WSTRB),
    .WLAST(m_axi_OUTPUTS_WLAST),
    .WID(m_axi_OUTPUTS_WID),
    .WUSER(m_axi_OUTPUTS_WUSER),
    .ARVALID(m_axi_OUTPUTS_ARVALID),
    .ARREADY(m_axi_OUTPUTS_ARREADY),
    .ARADDR(m_axi_OUTPUTS_ARADDR),
    .ARID(m_axi_OUTPUTS_ARID),
    .ARLEN(m_axi_OUTPUTS_ARLEN),
    .ARSIZE(m_axi_OUTPUTS_ARSIZE),
    .ARBURST(m_axi_OUTPUTS_ARBURST),
    .ARLOCK(m_axi_OUTPUTS_ARLOCK),
    .ARCACHE(m_axi_OUTPUTS_ARCACHE),
    .ARPROT(m_axi_OUTPUTS_ARPROT),
    .ARQOS(m_axi_OUTPUTS_ARQOS),
    .ARREGION(m_axi_OUTPUTS_ARREGION),
    .ARUSER(m_axi_OUTPUTS_ARUSER),
    .RVALID(m_axi_OUTPUTS_RVALID),
    .RREADY(m_axi_OUTPUTS_RREADY),
    .RDATA(m_axi_OUTPUTS_RDATA),
    .RLAST(m_axi_OUTPUTS_RLAST),
    .RID(m_axi_OUTPUTS_RID),
    .RUSER(m_axi_OUTPUTS_RUSER),
    .RRESP(m_axi_OUTPUTS_RRESP),
    .BVALID(m_axi_OUTPUTS_BVALID),
    .BREADY(m_axi_OUTPUTS_BREADY),
    .BRESP(m_axi_OUTPUTS_BRESP),
    .BID(m_axi_OUTPUTS_BID),
    .BUSER(m_axi_OUTPUTS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUTPUTS_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUTPUTS_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUTPUTS_RDATA),
    .I_RID(OUTPUTS_RID),
    .I_RUSER(OUTPUTS_RUSER),
    .I_RRESP(OUTPUTS_RRESP),
    .I_RLAST(OUTPUTS_RLAST),
    .I_AWVALID(OUTPUTS_AWVALID),
    .I_AWREADY(OUTPUTS_AWREADY),
    .I_AWADDR(OUTPUTS_addr_reg_1169),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUTPUTS_WVALID),
    .I_WREADY(OUTPUTS_WREADY),
    .I_WDATA(OUTPUTS_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(OUTPUTS_BVALID),
    .I_BREADY(OUTPUTS_BREADY),
    .I_BRESP(OUTPUTS_BRESP),
    .I_BID(OUTPUTS_BID),
    .I_BUSER(OUTPUTS_BUSER)
);

TOPANN_mux_32_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
TOPANN_mux_32_32_bkb_U1(
    .din0(Ainputs_2_V_4_reg_299),
    .din1(Ainputs_1_V_s_reg_287),
    .din2(Ainputs_2_V_s_reg_275),
    .din3(i_reg_382),
    .dout(tmp_21_fu_577_p5)
);

TOPANN_mux_32_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
TOPANN_mux_32_32_bkb_U2(
    .din0(layerResult_2_V_10_reg_346),
    .din1(layerResult_1_V_reg_334),
    .din2(layerResult_2_V_reg_322),
    .din3(i2_reg_405),
    .dout(tmp_16_fu_943_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUTS_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_INPUTS_ARREADY == 1'b1)) begin
                ap_reg_ioackin_INPUTS_ARREADY <= 1'b0;
            end else if ((1'b1 == INPUTS_ARREADY)) begin
                ap_reg_ioackin_INPUTS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUTS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            if ((ap_sig_ioackin_OUTPUTS_AWREADY == 1'b1)) begin
                ap_reg_ioackin_OUTPUTS_AWREADY <= 1'b0;
            end else if ((1'b1 == OUTPUTS_AWREADY)) begin
                ap_reg_ioackin_OUTPUTS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUTPUTS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_OUTPUTS_WREADY == 1'b1)) begin
                ap_reg_ioackin_OUTPUTS_WREADY <= 1'b0;
            end else if ((1'b1 == OUTPUTS_WREADY)) begin
                ap_reg_ioackin_OUTPUTS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i2_reg_405 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i2_reg_405 <= i_1_reg_1345;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_382 <= i_2_reg_1245;
    end else if (((exitcond1_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        i_reg_382 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_456_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_311 <= indvar_next_fu_462_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_311 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        neuronIndex_reg_358 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        neuronIndex_reg_358 <= neuronIndex_1_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_5_reg_370 <= tmpCalc_V_fu_655_p2;
    end else if (((exitcond1_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        p_Val2_5_reg_370 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        p_Val2_s_reg_393 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        p_Val2_s_reg_393 <= tmpCalc_V_1_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond3_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Ainputs_1_V_s_reg_287 <= Ainputs_2_V_3_fu_499_p3;
        Ainputs_2_V_4_reg_299 <= Ainputs_2_V_5_fu_506_p3;
        Ainputs_2_V_s_reg_275 <= Ainputs_2_V_1_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Ainputs_2_V_7_reg_1202 <= INPUTS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        OUTPUTS_addr_reg_1169[29 : 0] <= tmp_8_fu_447_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond3_reg_1180 <= exitcond3_reg_1180;
        ap_reg_pp0_iter1_sel_tmp7_reg_1195 <= sel_tmp7_reg_1195;
        ap_reg_pp0_iter1_sel_tmp_reg_1189 <= sel_tmp_reg_1189;
        exitcond3_reg_1180 <= exitcond3_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        bias_V_addr_reg_1237 <= tmp_fu_524_p1;
        tmp_11_reg_1232 <= tmp_11_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_1_reg_1345 <= i_1_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_1245 <= i_2_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inputs_V1_reg_1158 <= {{inputs_V[31:2]}};
        result_V3_reg_1153 <= {{result_V[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        layerResult_1_V_reg_334 <= layerResult_1_V_5_fu_912_p3;
        layerResult_2_V_10_reg_346 <= layerResult_0_V_5_fu_919_p3;
        layerResult_2_V_reg_322 <= layerResult_2_V_5_fu_905_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_OUTPUTS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        layerResult_V_gep_reg_1424 <= layerResult_V_gep_fu_1141_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layerWeigth_V_load_reg_1260 <= layerWeigth_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        neuronIndex_1_reg_1227 <= neuronIndex_1_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        outputLayerWeigth_V_1_reg_1355 <= outputLayerWeigth_V_q0;
        tmp_16_reg_1360 <= tmp_16_fu_943_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_Val2_2_reg_1365 <= p_Val2_2_fu_961_p2;
        p_Val2_3_reg_1371 <= {{p_Val2_2_fu_961_p2[55:24]}};
        tmp_27_reg_1376 <= tmp_27_fu_977_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_7_reg_1265 <= p_Val2_7_fu_595_p2;
        p_Val2_8_reg_1271 <= {{p_Val2_7_fu_595_p2[55:24]}};
        tmp_32_reg_1276 <= tmp_32_fu_611_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        r_V_1_reg_1300 <= r_V_1_fu_683_p2;
        tmp_14_reg_1293 <= tmp_14_fu_673_p2;
        tmp_5_reg_1286 <= tmp_5_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_V_4_reg_1305 <= r_V_4_fu_692_p2;
        ret_V_2_reg_1310 <= {{r_V_4_fu_692_p2[64:48]}};
        tmp_30_reg_1317 <= tmp_30_fu_708_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        r_V_5_reg_1402 <= r_V_5_fu_1058_p2;
        ret_V_reg_1407 <= {{r_V_5_fu_1058_p2[64:48]}};
        tmp_24_reg_1414 <= tmp_24_fu_1074_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        r_V_reg_1397 <= r_V_fu_1049_p2;
        tmp_4_reg_1392 <= tmp_4_fu_1039_p2;
        tmp_s_reg_1386 <= tmp_s_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_456_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sel_tmp7_reg_1195 <= sel_tmp7_fu_474_p2;
        sel_tmp_reg_1189 <= sel_tmp_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_21_reg_1255 <= tmp_21_fu_577_p5;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_INPUTS_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        INPUTS_ARVALID = 1'b1;
    end else begin
        INPUTS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUTS_RREADY = 1'b1;
    end else begin
        INPUTS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        INPUTS_blk_n_AR = m_axi_INPUTS_ARREADY;
    end else begin
        INPUTS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUTS_blk_n_R = m_axi_INPUTS_RVALID;
    end else begin
        INPUTS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_OUTPUTS_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        OUTPUTS_AWVALID = 1'b1;
    end else begin
        OUTPUTS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUTS_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        OUTPUTS_BREADY = 1'b1;
    end else begin
        OUTPUTS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_OUTPUTS_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        OUTPUTS_WVALID = 1'b1;
    end else begin
        OUTPUTS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        OUTPUTS_blk_n_AW = m_axi_OUTPUTS_AWREADY;
    end else begin
        OUTPUTS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        OUTPUTS_blk_n_B = m_axi_OUTPUTS_BVALID;
    end else begin
        OUTPUTS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        OUTPUTS_blk_n_W = m_axi_OUTPUTS_WREADY;
    end else begin
        OUTPUTS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_456_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUTS_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUTPUTS_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_INPUTS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_INPUTS_ARREADY = INPUTS_ARREADY;
    end else begin
        ap_sig_ioackin_INPUTS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUTPUTS_AWREADY == 1'b0)) begin
        ap_sig_ioackin_OUTPUTS_AWREADY = OUTPUTS_AWREADY;
    end else begin
        ap_sig_ioackin_OUTPUTS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUTPUTS_WREADY == 1'b0)) begin
        ap_sig_ioackin_OUTPUTS_WREADY = OUTPUTS_WREADY;
    end else begin
        ap_sig_ioackin_OUTPUTS_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        coeTanSig_V_address0 = tmp_13_fu_1109_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        coeTanSig_V_address0 = tmp_19_fu_743_p1;
    end else begin
        coeTanSig_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20))) begin
        coeTanSig_V_ce0 = 1'b1;
    end else begin
        coeTanSig_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        layerWeigth_V_ce0 = 1'b1;
    end else begin
        layerWeigth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        outputLayerBias_V_ce0 = 1'b1;
    end else begin
        outputLayerBias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        outputLayerWeigth_V_ce0 = 1'b1;
    end else begin
        outputLayerWeigth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_INPUTS_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_456_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_fu_456_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond1_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond2_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state22 : begin
            if (((exitcond_fu_926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_OUTPUTS_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((ap_sig_ioackin_OUTPUTS_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == OUTPUTS_BVALID) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Ainputs_2_V_1_fu_486_p3 = ((ap_reg_pp0_iter1_sel_tmp7_reg_1195[0:0] === 1'b1) ? Ainputs_2_V_s_reg_275 : Ainputs_2_V_fu_480_p3);

assign Ainputs_2_V_2_fu_493_p3 = ((ap_reg_pp0_iter1_sel_tmp_reg_1189[0:0] === 1'b1) ? Ainputs_2_V_7_reg_1202 : Ainputs_1_V_s_reg_287);

assign Ainputs_2_V_3_fu_499_p3 = ((ap_reg_pp0_iter1_sel_tmp7_reg_1195[0:0] === 1'b1) ? Ainputs_1_V_s_reg_287 : Ainputs_2_V_2_fu_493_p3);

assign Ainputs_2_V_5_fu_506_p3 = ((ap_reg_pp0_iter1_sel_tmp7_reg_1195[0:0] === 1'b1) ? Ainputs_2_V_7_reg_1202 : Ainputs_2_V_4_reg_299);

assign Ainputs_2_V_fu_480_p3 = ((ap_reg_pp0_iter1_sel_tmp_reg_1189[0:0] === 1'b1) ? Ainputs_2_V_s_reg_275 : Ainputs_2_V_7_reg_1202);

assign INPUTS_ARADDR = tmp_1_fu_437_p1;

assign OUTPUTS_WDATA = $signed(layerResult_V_gep_reg_1424);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == INPUTS_RVALID) & (exitcond3_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == INPUTS_RVALID) & (exitcond3_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == INPUTS_RVALID) & (exitcond3_reg_1180 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_512_p2 = ((neuronIndex_reg_358 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_551_p2 = ((i_reg_382 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_456_p2 = ((indvar_reg_311 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_926_p2 = ((i2_reg_405 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_932_p2 = (i2_reg_405 + 2'd1);

assign i_2_fu_557_p2 = (i_reg_382 + 2'd1);

assign indvar_next_fu_462_p2 = (indvar_reg_311 + 2'd1);

assign layerResult_0_V_1_c_fu_1114_p1 = $signed(coeTanSig_V_q0);

assign layerResult_0_V_2_fu_836_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? 32'd4278190080 : layerResult_2_V_10_reg_346);

assign layerResult_0_V_3_c_fu_800_p1 = $signed(coeTanSig_V_q0);

assign layerResult_0_V_4_fu_898_p3 = ((tmp_14_reg_1293[0:0] === 1'b1) ? layerResult_0_V_2_fu_836_p3 : layerResult_2_V_11_fu_876_p3);

assign layerResult_0_V_5_fu_919_p3 = ((tmp_5_reg_1286[0:0] === 1'b1) ? layerResult_0_V_s_fu_792_p3 : layerResult_0_V_4_fu_898_p3);

assign layerResult_0_V_s_fu_792_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? 32'd16777216 : layerResult_2_V_10_reg_346);

assign layerResult_1_V_1_fu_784_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_1_V_reg_334 : sel_tmp9_fu_776_p3);

assign layerResult_1_V_2_fu_828_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_1_V_reg_334 : sel_tmp10_fu_820_p3);

assign layerResult_1_V_4_fu_891_p3 = ((tmp_14_reg_1293[0:0] === 1'b1) ? layerResult_1_V_2_fu_828_p3 : layerResult_2_V_9_fu_868_p3);

assign layerResult_1_V_5_fu_912_p3 = ((tmp_5_reg_1286[0:0] === 1'b1) ? layerResult_1_V_1_fu_784_p3 : layerResult_1_V_4_fu_891_p3);

assign layerResult_2_V_11_fu_876_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_0_V_3_c_fu_800_p1 : layerResult_2_V_10_reg_346);

assign layerResult_2_V_1_fu_768_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : sel_tmp6_fu_754_p3);

assign layerResult_2_V_2_fu_812_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : sel_tmp1_fu_804_p3);

assign layerResult_2_V_3_fu_852_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : layerResult_2_V_7_fu_844_p3);

assign layerResult_2_V_4_fu_884_p3 = ((tmp_14_reg_1293[0:0] === 1'b1) ? layerResult_2_V_2_fu_812_p3 : layerResult_2_V_3_fu_852_p3);

assign layerResult_2_V_5_fu_905_p3 = ((tmp_5_reg_1286[0:0] === 1'b1) ? layerResult_2_V_1_fu_768_p3 : layerResult_2_V_4_fu_884_p3);

assign layerResult_2_V_7_fu_844_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : layerResult_0_V_3_c_fu_800_p1);

assign layerResult_2_V_8_fu_860_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? layerResult_0_V_3_c_fu_800_p1 : layerResult_1_V_reg_334);

assign layerResult_2_V_9_fu_868_p3 = ((sel_tmp8_fu_762_p2[0:0] === 1'b1) ? layerResult_1_V_reg_334 : layerResult_2_V_8_fu_860_p3);

assign layerResult_V_gep_fu_1141_p3 = ((tmp_15_fu_1136_p2[0:0] === 1'b1) ? sel_tmp4_fu_1128_p3 : layerResult_0_V_1_c_fu_1114_p1);

assign layerWeigth_V_address0 = tmp_25_cast_fu_572_p1;

assign neuronIndex_1_fu_518_p2 = (neuronIndex_reg_358 + 2'd1);

assign outputLayerBias_V_address0 = 64'd0;

assign outputLayerWeigth_V_address0 = tmp_6_fu_938_p1;

assign p_1_fu_1095_p3 = ((tmp_10_fu_1085_p2[0:0] === 1'b1) ? ret_V_reg_1407 : ret_V_1_fu_1090_p2);

assign p_2_fu_1102_p3 = ((tmp_23_fu_1078_p3[0:0] === 1'b1) ? p_1_fu_1095_p3 : ret_V_reg_1407);

assign p_3_fu_736_p3 = ((tmp_29_fu_712_p3[0:0] === 1'b1) ? p_s_fu_729_p3 : ret_V_2_reg_1310);

assign p_Val2_2_fu_961_p0 = outputLayerWeigth_V_1_reg_1355;

assign p_Val2_2_fu_961_p1 = tmp_16_reg_1360;

assign p_Val2_2_fu_961_p2 = ($signed(p_Val2_2_fu_961_p0) * $signed(p_Val2_2_fu_961_p1));

assign p_Val2_7_fu_595_p0 = tmp_21_reg_1255;

assign p_Val2_7_fu_595_p1 = layerWeigth_V_load_reg_1260;

assign p_Val2_7_fu_595_p2 = ($signed(p_Val2_7_fu_595_p0) * $signed(p_Val2_7_fu_595_p1));

assign p_s_fu_729_p3 = ((tmp_18_fu_719_p2[0:0] === 1'b1) ? ret_V_2_reg_1310 : ret_V_3_fu_724_p2);

assign p_shl_cast_fu_541_p1 = tmp_9_fu_533_p3;

assign qb_assign_1_fu_1006_p2 = (r_i_i_fu_1000_p2 & qbit_1_fu_981_p3);

assign qb_assign_3_fu_640_p2 = (r_i_i1_fu_634_p2 & qbit_fu_615_p3);

assign qbit_1_fu_981_p3 = p_Val2_2_reg_1365[32'd23];

assign qbit_fu_615_p3 = p_Val2_7_reg_1265[32'd23];

assign r_1_fu_988_p2 = ((tmp_27_reg_1376 != 23'd0) ? 1'b1 : 1'b0);

assign r_V_1_fu_683_p2 = ($signed(33'd83886080) + $signed(tmp_17_fu_679_p1));

assign r_V_4_fu_692_p1 = r_V_4_fu_692_p10;

assign r_V_4_fu_692_p10 = r_V_1_reg_1300;

assign r_V_4_fu_692_p2 = ($signed(65'd36893488145691049984) * $signed({{1'b0}, {r_V_4_fu_692_p1}}));

assign r_V_5_fu_1058_p1 = r_V_5_fu_1058_p10;

assign r_V_5_fu_1058_p10 = r_V_reg_1397;

assign r_V_5_fu_1058_p2 = ($signed(65'd36893488145691049984) * $signed({{1'b0}, {r_V_5_fu_1058_p1}}));

assign r_V_fu_1049_p2 = ($signed(33'd83886080) + $signed(tmp_3_fu_1045_p1));

assign r_fu_622_p2 = ((tmp_32_reg_1276 != 23'd0) ? 1'b1 : 1'b0);

assign r_i_i1_fu_634_p2 = (tmp_33_fu_627_p3 | r_fu_622_p2);

assign r_i_i_fu_1000_p2 = (tmp_28_fu_993_p3 | r_1_fu_988_p2);

assign ret_V_1_fu_1090_p2 = (17'd1 + ret_V_reg_1407);

assign ret_V_3_fu_724_p2 = (17'd1 + ret_V_2_reg_1310);

assign sel_tmp10_fu_820_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? 32'd4278190080 : layerResult_1_V_reg_334);

assign sel_tmp1_fu_804_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : 32'd4278190080);

assign sel_tmp2_fu_1118_p2 = (tmp_s_reg_1386 ^ 1'd1);

assign sel_tmp3_fu_1123_p2 = (tmp_4_reg_1392 & sel_tmp2_fu_1118_p2);

assign sel_tmp4_fu_1128_p3 = ((sel_tmp3_fu_1123_p2[0:0] === 1'b1) ? 26'd50331648 : 26'd16777216);

assign sel_tmp5_fu_748_p2 = ((neuronIndex_reg_358 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_754_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? layerResult_2_V_reg_322 : 32'd16777216);

assign sel_tmp7_fu_474_p2 = ((indvar_reg_311 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_762_p2 = ((neuronIndex_reg_358 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_776_p3 = ((sel_tmp5_fu_748_p2[0:0] === 1'b1) ? 32'd16777216 : layerResult_1_V_reg_334);

assign sel_tmp_fu_468_p2 = ((indvar_reg_311 == 2'd1) ? 1'b1 : 1'b0);

assign tmpCalc_V_1_fu_1021_p2 = (p_Val2_s_reg_393 + tmp_20_fu_1016_p2);

assign tmpCalc_V_4_fu_661_p2 = (p_Val2_5_reg_370 + bias_V_q0);

assign tmpCalc_V_5_fu_1027_p2 = (outputLayerBias_V_q0 + p_Val2_s_reg_393);

assign tmpCalc_V_fu_655_p2 = (tmp_22_fu_650_p2 + p_Val2_5_reg_370);

assign tmp_10_fu_1085_p2 = ((tmp_24_reg_1414 == 48'd0) ? 1'b1 : 1'b0);

assign tmp_11_fu_545_p2 = (p_shl_cast_fu_541_p1 - tmp_cast_fu_529_p1);

assign tmp_12_fu_646_p1 = qb_assign_3_fu_640_p2;

assign tmp_13_fu_1109_p1 = $signed(p_2_fu_1102_p3);

assign tmp_14_fu_673_p2 = (($signed(tmpCalc_V_4_fu_661_p2) < $signed(32'd4211081216)) ? 1'b1 : 1'b0);

assign tmp_15_fu_1136_p2 = (tmp_s_reg_1386 | sel_tmp3_fu_1123_p2);

assign tmp_17_fu_679_p1 = $signed(tmpCalc_V_4_fu_661_p2);

assign tmp_18_fu_719_p2 = ((tmp_30_reg_1317 == 48'd0) ? 1'b1 : 1'b0);

assign tmp_19_fu_743_p1 = $signed(p_3_fu_736_p3);

assign tmp_1_fu_437_p1 = inputs_V1_reg_1158;

assign tmp_20_fu_1016_p2 = (tmp_7_fu_1012_p1 + p_Val2_3_reg_1371);

assign tmp_22_fu_650_p2 = (p_Val2_8_reg_1271 + tmp_12_fu_646_p1);

assign tmp_23_fu_1078_p3 = r_V_5_reg_1402[32'd64];

assign tmp_24_fu_1074_p1 = r_V_5_fu_1058_p2[47:0];

assign tmp_25_cast_fu_572_p1 = $signed(tmp_25_fu_567_p2);

assign tmp_25_fu_567_p2 = (tmp_11_reg_1232 + tmp_9_cast_fu_563_p1);

assign tmp_27_fu_977_p1 = p_Val2_2_fu_961_p2[22:0];

assign tmp_28_fu_993_p3 = p_Val2_2_reg_1365[32'd24];

assign tmp_29_fu_712_p3 = r_V_4_reg_1305[32'd64];

assign tmp_30_fu_708_p1 = r_V_4_fu_692_p2[47:0];

assign tmp_32_fu_611_p1 = p_Val2_7_fu_595_p2[22:0];

assign tmp_33_fu_627_p3 = p_Val2_7_reg_1265[32'd24];

assign tmp_3_fu_1045_p1 = $signed(tmpCalc_V_5_fu_1027_p2);

assign tmp_4_fu_1039_p2 = (($signed(tmpCalc_V_5_fu_1027_p2) < $signed(32'd4211081216)) ? 1'b1 : 1'b0);

assign tmp_5_fu_667_p2 = (($signed(tmpCalc_V_4_fu_661_p2) > $signed(32'd83886080)) ? 1'b1 : 1'b0);

assign tmp_6_fu_938_p1 = i2_reg_405;

assign tmp_7_fu_1012_p1 = qb_assign_1_fu_1006_p2;

assign tmp_8_fu_447_p1 = result_V3_reg_1153;

assign tmp_9_cast_fu_563_p1 = i_reg_382;

assign tmp_9_fu_533_p3 = {{neuronIndex_reg_358}, {2'd0}};

assign tmp_cast_fu_529_p1 = neuronIndex_reg_358;

assign tmp_fu_524_p1 = neuronIndex_reg_358;

assign tmp_s_fu_1033_p2 = (($signed(tmpCalc_V_5_fu_1027_p2) > $signed(32'd83886080)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    OUTPUTS_addr_reg_1169[31:30] <= 2'b00;
end

endmodule //TOPANN
